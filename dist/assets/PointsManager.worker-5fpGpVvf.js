let s, n = null;
function F() {
  return (n === null || n.byteLength === 0) && (n = new Uint32Array(s.memory.buffer)), n;
}
let c = 0;
function M(A, I) {
  const g = I(A.length * 4, 4) >>> 0;
  return F().set(A, g / 4), c = A.length, g;
}
function U(A, I) {
  return A = A >>> 0, F().subarray(A / 4, A / 4 + I);
}
function k(A, I) {
  const g = M(A, s.__wbindgen_malloc), B = c, Q = M(I, s.__wbindgen_malloc), i = c, a = s.radix_sort_indices(g, B, Q, i);
  var E = U(a[0], a[1]).slice();
  return s.__wbindgen_free(a[0], a[1] * 4, 4), E;
}
async function S(A, I) {
  if (typeof Response == "function" && A instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(A, I);
      } catch (B) {
        if (A.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", B);
        else
          throw B;
      }
    const g = await A.arrayBuffer();
    return await WebAssembly.instantiate(g, I);
  } else {
    const g = await WebAssembly.instantiate(A, I);
    return g instanceof WebAssembly.Instance ? { instance: g, module: A } : g;
  }
}
function d() {
  const A = {};
  return A.wbg = {}, A.wbg.__wbindgen_init_externref_table = function() {
    const I = s.__wbindgen_export_0, g = I.grow(4);
    I.set(0, void 0), I.set(g + 0, void 0), I.set(g + 1, null), I.set(g + 2, !0), I.set(g + 3, !1);
  }, A;
}
function J(A, I) {
  return s = A.exports, Y.__wbindgen_wasm_module = I, n = null, s.__wbindgen_start(), s;
}
async function Y(A) {
  if (s !== void 0) return s;
  typeof A < "u" && (Object.getPrototypeOf(A) === Object.prototype ? { module_or_path: A } = A : console.warn("using deprecated parameters for the initialization function; pass a single object instead")), typeof A > "u" && (A = new URL("data:application/wasm;base64,", import.meta.url));
  const I = d();
  (typeof A == "string" || typeof Request == "function" && A instanceof Request || typeof URL == "function" && A instanceof URL) && (A = fetch(A));
  const { instance: g, module: B } = await S(await A, I);
  return J(g, B);
}
const R = new ArrayBuffer(4), K = new Float32Array(R), L = new Uint32Array(R);
class f {
  constructor(I) {
    this.points = new Float32Array(4096 * 3), this.distances = new Uint32Array(4096), this.pointSets = /* @__PURE__ */ new Map(), this.numUsed = 0, this.sortOngoing = !1, this.sortCallback = I, this.sortPromise = Promise.resolve();
  }
  hidePoints(I) {
    const g = this.pointSets.get(I);
    g.used && (g.used = !1);
  }
  removePoints(I) {
    const g = this.pointSets.get(I);
    g.used && (g.used = !1), this.pointSets.delete(I);
    let B = 0;
    for (const [Q, i] of this.pointSets.entries())
      Q + i.length > B && (B = Q + i.length);
  }
  showPoints(I) {
    const g = this.pointSets.get(I);
    g.used || (g.used = !0);
  }
  resizeArrays(I) {
    if (isNaN(I) && console.log("hit max splats"), I > this.points.length) {
      I = Math.max(this.points.length * 2, I);
      const g = new Float32Array(I);
      g.set(this.points, 0), this.points = g;
      const B = Math.floor(I / 3), Q = new Uint32Array(B);
      Q.set(this.distances, 0), this.distances = Q;
    }
  }
  addBatchesOffsetStrideCount(I, g, B, Q, i) {
    const a = Math.max(this.points.length, g[g.length - 1] + i * 3);
    this.resizeArrays(a);
    for (let E = 0; E < g.length; E++) {
      const o = g[E], w = E * i * Q, D = Math.min((I.length - w) / Q, i);
      for (let t = 0; t < D; t++)
        this.points[o + t * 3] = I[t * Q + B + w], this.points[o + t * 3 + 1] = I[t * Q + B + w + 1], this.points[o + t * 3 + 2] = I[t * Q + B + w + 2];
      this.pointSets.set(o, { length: D * 3, used: !1 });
    }
  }
  computeDistances(I, g, B) {
    this.distances.fill(0);
    const Q = Array.from(this.pointSets.keys()), i = Q.length;
    this.numUsed = 0;
    for (let E = 0; E < i; E++) {
      const o = Q[E], w = this.pointSets.get(o);
      if (!w.used) continue;
      const D = Math.floor(w.length / 3);
      this.numUsed += D;
    }
    this.indexes = new Uint32Array(this.numUsed), this.distances = new Uint32Array(this.numUsed);
    let a = 0;
    for (let E = 0; E < i; E++) {
      const o = Q[E], w = Math.floor(o / 3), D = this.pointSets.get(o);
      if (!D.used) continue;
      const t = Math.floor(D.length / 3);
      for (let N = 0; N < t; N++) {
        const y = o + N * 3, G = I - this.points[y], e = g - this.points[y + 1], h = B - this.points[y + 2], r = G * G + e * e + h * h;
        K[0] = r, this.distances[a] = L[0], this.indexes[a++] = w + N;
      }
    }
  }
  sort(I, g) {
    this.pendingSort = I, this.pendingID = g, this.sortOngoing || (this.sortOngoing = !0, this.processSortQueue());
  }
  // Asynchronous loop to process sort requests sequentially
  async processSortQueue() {
    for (this.initialized || (await Y(), this.initialized = !0); this.pendingSort; ) {
      const I = this.pendingSort, g = this.pendingID;
      this.pendingSort = null, this.pendingID = null;
      const B = performance.now();
      this.computeDistances(I[0], I[1], I[2]), this.indexes = k(this.indexes, this.distances), performance.now() - B, this.sortCallback(this.indexes, this.numUsed, g), await new Promise((Q) => setTimeout(Q, 0));
    }
    this.sortOngoing = !1;
  }
}
const H = (A, I, g) => {
  const B = new Uint32Array(A);
  postMessage({
    order: B.buffer,
    count: I,
    id: g
  }, [B.buffer]);
};
let C;
self.onmessage = function(A) {
  try {
    switch (A.data.method) {
      case "addBatches":
        C || (C = new f(H)), C.addBatchesOffsetStrideCount(new Float32Array(A.data.positions), A.data.insertionIndexes, A.data.offset, A.data.stride, A.data.batchSize);
        break;
      case "hide":
        C && C.hidePoints(A.data.insertionIndex);
        break;
      case "hideBatches":
        C && (A.data.insertionIndexes.forEach((I) => {
          C.hidePoints(I);
        }), C.sort(A.data.xyz, A.data.id));
        break;
      case "show":
        C && (C.showPoints(A.data.insertionIndex), C.sort(A.data.xyz, A.data.id));
        break;
      case "showBatches":
        C && (A.data.insertionIndexes.forEach((I) => {
          C.showPoints(I);
        }), C.sort(A.data.xyz, A.data.id));
        break;
      case "remove":
        C && (C.removePoints(A.data.insertionIndex), C.sort(A.data.xyz, A.data.id));
        break;
      case "removeBatches":
        C && (A.data.insertionIndexes.forEach((I) => {
          C.removePoints(I);
        }), C.sort(A.data.xyz, A.data.id));
        break;
      case "sort":
        C && C.sort(A.data.xyz, A.data.id);
        break;
      default:
        throw new Error(`No method with name ${A.data.method}`);
    }
  } catch (I) {
    postMessage({ error: I.message });
  }
};
//# sourceMappingURL=PointsManager.worker-5fpGpVvf.js.map
